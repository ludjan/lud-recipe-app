<!DOCTYPE html>
<html>
  <head>
    <%- include('partials/head-links.ejs') %>
    <title>Recipe - Add recipe</title>
  </head>
  <body>
    <div class="wrapper">
      <section>
        <div class="container text-center">
          <h1 id="recipe-heading">New recipe</h1>
        </div>
      </section>

      <section>
        <div class="container">
          <form id="save-recipe-form" onsubmit="return false">
            <label for="recipe-name">Name</label>
            <input id="recipe-name" type="text" name="hest" />

            <label for="recipe-description">Description</label>
            <input id="recipe-description" type="text" name="hist" />

            <label for="recipe-portions">Portions</label><br />
            <input id="recipe-portions" type="number" name="hast" />
            <br />
            <br />

            <!-- <input
              type="submit"
              id="save-recipe-btn"
              value="Submit"
              disabled="disabled"
              /> -->
          </form>
        </div>
      </section>

      <section>
        <div class="container">
          <div class="recipe-feed">
            <p>Ingredient - quantity - unit</p>
            <div id="recipe-ingredient-feed" class="recipe-feed"></div>
            <div class="text-center">
              <button id="add-ingredient-input-btn" class="btn btn-secondary">
                Add ingredient input +
              </button>
            </div>
          </div>
        </div>
      </section>

      <section>
        <div class="container">
          <div class="recipe-feed">
            <p>Steps</p>
            <div id="recipe-step-feed" class="recipe-feed"></div>
            <div class="text-center">
              <button id="add-step-input-btn" class="btn btn-secondary">
                Add recipe input +
              </button>
            </div>
          </div>
        </div>
      </section>

      <section>
        <div class="container">
          <button
            id="save-btn"
            style="float: right"
            class="btn btn-primary btn-lg"
          >
            Save
          </button>
          <!-- <div id="recipeId"></div> -->
        </div>
      </section>

      <!--Make sure the form has the autocomplete function switched off:-->
      <!-- <form autocomplete="off">
        <div class="autocomplete" style="width: 300px">
          <input
            id="myInput"
            type="text"
            name="myCountry"
            placeholder="Country"
          />
        </div>
        <input type="submit" />
      </form> -->
    </div>

    <script src="/static/js/api_calls.js"></script>
    <script src="/static/js/ingredients.js"></script>
    <script src="/static/js/steps.js"></script>
    <script src="/static/js/check_input.js"></script>
    <script src="/static/js/utils.js"></script>
    <script src="/static/js/autocomplete.js"></script>
    <script type="text/javascript">
      '<% console.log(user); %>';

      const recipeHeading = document.getElementById('recipe-heading');
      const recipeNameInput = document.getElementById('recipe-name');
      const recipeDescriptionInput =
        document.getElementById('recipe-description');
      const recipePortionsInput = document.getElementById('recipe-portions');
      // const saveRecipeForm = document.getElementById('save-recipe-form');

      const saveBtn = document.getElementById('save-btn');

      // are set by fetch
      var ingredients = [];
      var units = [];

      // saveRecipeForm.addEventListener('submit', () => {});

      addIngredientInputBtn.addEventListener('click', () => {
        addIngredientInput();
      });
      addStepInputBtn.addEventListener('click', () => {
        addStepInput();
      });

      saveBtn.addEventListener('click', () => {
        console.log('SaveBtn was clicked');

        saveCurrentIngredientInputs();
        saveCurrentStepInputs();
        if (!allRecipeInputsAreValid()) return;

        // the object we are sending
        var newRecipe = {
          recipe: {
            name: null,
            description: null,
            portions: null,
          },
          ingredients: null,
          steps: null,
        };

        // recipe
        newRecipe.recipe.name = recipeNameInput.value;
        newRecipe.recipe.description = recipeDescriptionInput.value;
        newRecipe.recipe.portions = recipePortionsInput.value;

        newRecipe.ingredients = getFormattedRecipeIngredients();
        newRecipe.steps = getFormattedRecipeSteps();

        console.log(`About to send:`);
        console.log(newRecipe);

        createFullRecipe(newRecipe).then((response) => {
          if (!response.ok) {
            const errorMessage = `Error ${response.status} - ${response.statusText}`;
            console.log(errorMessage);
            return alert(errorMessage);
          } else {
            return (window.location.href = '../');
          }
        });
      });

      Promise.all([getIngredients(), getUnits()])
        .then((responses) => Promise.all(responses.map((res) => res.json())))
        .then(([ingredientResponse, unitResponse]) => {
          ingredients = ingredientResponse;
          console.log(ingredients);
          units = unitResponse;
          console.log(units);

          // autocomplete(
          //   document.getElementById('myInput'),
          //   getPureIngredients(ingredients)
          // );

          // add first input fields to help user
          addIngredientInput();
          addStepInput();
          console.log(`Added ingredient and step input`);
        });

      function getPureIngredients(arr) {
        newArray = [];
        for (let i = 0; i < arr.length; i++) {
          newArray.push(arr[i].name);
        }
        return newArray;
      }
    </script>
  </body>
</html>
