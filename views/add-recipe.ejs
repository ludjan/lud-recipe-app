<!DOCTYPE html>
<html>
  <head>
    <title>Recipe - Add recipe</title>
  </head>
  <body>
    <div>
      <h1 id="recipe-heading">New recipe</h1>
      <form id="save-recipe-form" onsubmit="return false">
        <label for="recipe-name">Recipe name</label><br />
        <input id="recipe-name" type="text" name="hest" /><br />

        <label for="recipe-description">Recipe Description</label><br />
        <input id="recipe-description" type="text" name="hist" /><br />

        <label for="recipe-portions">Recipe portions</label><br />
        <input id="recipe-portions" type="text" name="hast" />
        <br />
        <br />

        <input
          type="submit"
          id="save-recipe-btn"
          value="Submit"
          disabled="disabled"
        />
      </form>

      <br />
      <br />
      <div id="recipe-ingredient-feed"></div>
      <br />
      <button id="add-ingredient-input-btn">Add ingredient input</button>

      <br />
      <br />
      <div id="recipe-step-feed"></div>
      <br />
      <button id="add-step-input-btn">Add recipe input</button>

      <br />
      <br />
      <button id="save-btn">Log and save</button>

      <div id="recipeId"></div>
    </div>

    <script src="/static/js/api_calls.js"></script>
    <script src="/static/js/ingredients.js"></script>
    <script src="/static/js/steps.js"></script>
    <script src="/static/js/check_input.js"></script>
    <script src="/static/js/utils.js"></script>
    <script type="text/javascript">
      const recipeHeading = document.getElementById('recipe-heading');
      const recipeNameInput = document.getElementById('recipe-name');
      const recipeDescriptionInput =
        document.getElementById('recipe-description');
      const recipePortionsInput = document.getElementById('recipe-portions');
      const saveRecipeForm = document.getElementById('save-recipe-form');

      // for testing
      const dummyCreateButton = document.getElementById('dummy-create');

      const saveBtn = document.getElementById('save-btn');

      // are set by fetch
      var ingredients = [];
      var units = [];

      saveRecipeForm.addEventListener('submit', () => {
        const recipeName = recipeNameInput.value;
        const recipeDescription = recipeDescriptionInput.value;

        if (!isAlphaNumeric(recipeName)) {
          return alert(`Name '${recipeName}' is not alphanumeric`);
        }
        if (!isAlphaNumeric(recipeDescription)) {
          return alert(
            `Description '${recipeDescription}' is not alphanumeric`
          );
        }

        // // create the new entry
        // const newRecipe = {
        //   name: recipeNameInput.value,
        //   description: recipeDescriptionInput.value
        // }
        // console.log(newRecipe)

        // console.log(`Data = ${data}`)

        // if (rId == null) {

        //   // async add, then re-render
        //   addRecipe(newRecipe).then(response => {
        //     if (!response.ok) {
        //       const errorMessage = `Error ${response.status} - ${response.statusText}`
        //       console.log(errorMessage)
        //     } else {
        //       window.location.pathname = ('/..') // navigates user back to main page
        //     }
        //   })

        // } else {
        //   console.log(`About to update recipe with id ${rId}`)
        //   updateRecipe(newRecipe, rId).then(response => {
        //     if (!response.ok) {
        //       const errorMessage = `Error ${response.status} - ${response.statusText}`
        //       console.log(errorMessage)
        //       return alert(errorMessage)
        //     } else {
        //       window.location.pathname = (`/../recipes/${rId}`)
        //     }
        //   })
        // }
      });

      addIngredientInputBtn.addEventListener('click', () => {
        addIngredientInput();
      });
      addStepInputBtn.addEventListener('click', () => {
        addStepInput();
      });

      function addIngredientInput() {
        saveCurrentIngredientInputs();
        // push empty recipeIngredient
        recipeIngredientArray.push({
          ingredient: null,
          quantity: null,
          unit: null,
        });
        rerenderRecipeIngredientsFeed();
      }

      function addStepInput() {
        saveCurrentStepInputs();
        recipeStepArray.push(''); // push empty step
        rerenderRecipeStepsFeed();
      }

      function allRecipeInputsAreValid() {
        const recipeName = recipeNameInput.value;
        const recipeDescription = recipeDescriptionInput.value;
        const recipePortions = recipePortionsInput.value;

        if (!isAlphaNumeric(recipeName)) {
          alert(`Name '${recipeName}' is not alphanumeric`);
          return false;
        }
        if (!isAlphaNumeric(recipeDescription)) {
          alert(`Description '${recipeDescription}' is not alphanumeric`);
          return false;
        }
        if (!isNumeric(recipePortions)) {
          alert(`Portions '${recipePortions}'' is not numeric`);
          return false;
        }

        // validate ingredients
        var validRecipeIngredientCount = 0;
        console.log(
          `RecipeIngredientsArray length = ${recipeIngredientArray.length}`
        );
        for (let i = 0; i < recipeIngredientArray.length; i++) {
          const { quantity } = recipeIngredientArray[i];
          if (!isNumeric(quantity) || parseInt(quantity) <= 0) {
            console.log(
              `This amount ${quantity} was not a number or too small`
            );
            // remove this ?
            // removeIngredientInput
          } else {
            validRecipeIngredientCount++;
          }
        }
        if (validRecipeIngredientCount <= 0) {
          alert(`Must have at least 1 valid ingredients`);
          return false;
        }

        // validate ingredients
        var validStepCount = 0;
        console.log(`RecipeStepArray length = ${recipeStepArray.length}`);
        for (let i = 0; i < recipeStepArray.length; i++) {
          const description = recipeStepArray[i];
          if (isBlank(description)) {
            // remove this ?
            console.log(`Description cannot be blank`);
          } else {
            validStepCount++;
          }
        }
        if (validStepCount <= 0) {
          alert(`Must have at least 1 valid step`);
          return false;
        }

        return true;
      }

      saveBtn.addEventListener('click', () => {
        console.log('SaveBtn was clicked');

        saveCurrentIngredientInputs();
        saveCurrentStepInputs();
        if (!allRecipeInputsAreValid()) return;

        // the object we are sending
        var newRecipe = {
          recipe: {
            name: null,
            description: null,
            portions: null,
          },
          ingredients: null,
          steps: null,
        };

        // recipe
        newRecipe.recipe.name = recipeNameInput.value;
        newRecipe.recipe.description = recipeDescriptionInput.value;
        newRecipe.recipe.portions = 2; // for testing

        // ingredients
        newRecipe.ingredients = getFormattedRecipeIngredients();

        // steps
        newRecipe.steps = getFormattedRecipeSteps();

        console.log(`About to send:`);
        console.log(newRecipe);

        createFullRecipe(newRecipe).then((response) => {
          if (!response.ok) {
            const errorMessage = `Error ${response.status} - ${response.statusText}`;
            console.log(errorMessage);
            return alert(errorMessage);
          } else {
            return (window.location.href = '../');
          }
        });
      });

      Promise.all([getIngredients(), getUnits()])
        .then((responses) => Promise.all(responses.map((res) => res.json())))
        .then(([ingredientResponse, unitResponse]) => {
          ingredients = ingredientResponse;
          console.log(ingredients);
          units = unitResponse;
          console.log(units);

          // add first input fields to help user
          addIngredientInput();
          addStepInput();
          console.log(`Added ingredient and step input`);
        });
    </script>
  </body>
</html>
