<!DOCTYPE html>
<html>
  <head>
    <title>Recipe - Add or edit recipe</title>
  </head>
  <body>
    <div>
      <h1 id="recipe-heading">New recipe</h1>
      <form id="save-recipe-form" onsubmit="return false">
        <label for="recipe-name">Recipe name</label><br />
        <input id="recipe-name" type="text" name="hest" /><br />
        <label for="recipe-description">Recipe Description</label><br />
        <input id="recipe-description" type="text" name="hist" />
        <br />
        <br />
        <input type="submit" id="save-recipe-btn" value="Submit" />
      </form>

      <br />
      <br />
      <div id="recipe-ingredient-feed"></div>
      <br />
      <button id="add-ingredient-input-btn">Add ingredient input</button>

      <br />
      <br />
      <div id="recipe-step-feed"></div>
      <br />
      <button id="add-step-input-btn">Add recipe input</button>

      <br />
      <br />
      <button id="console-log-input">Console log input</button>

      <br />
      <br />
      <button id="before-send-btn">Before send button</button>

      <br />
      <br />
      <button id="dummy-create">Dummy</button>

      <div id="recipeId"></div>
    </div>

    <script src="/static/js/api_calls.js"></script>
    <script src="/static/js/ingredients.js"></script>
    <script src="/static/js/steps.js"></script>
    <script src="/static/js/check_input.js"></script>
    <script src="/static/js/utils.js"></script>
    <script type="text/javascript">
      const recipeHeading = document.getElementById('recipe-heading');
      const recipeNameInput = document.getElementById('recipe-name');
      const recipeDescriptionInput =
        document.getElementById('recipe-description');
      const saveRecipeForm = document.getElementById('save-recipe-form');

      // for testing
      const consoleLogInputBtn = document.getElementById('console-log-input');
      const dummyCreateButton = document.getElementById('dummy-create');
      const beforeSendBtn = document.getElementById('before-send-btn');

      // ejs values
      var data = '<%- JSON.stringify(data) %>';
      var rId;

      // are set by fetch
      var ingredients = [];
      var units = [];

      getIngredients()
        .then((response) => response.json())
        .then((data) => {
          console.log(data);
          ingredients = data;
          // appendIngredientsToSelect(data, ingredientsSelect)
        });

      getUnits()
        .then((response) => response.json())
        .then((data) => {
          console.log(data);
          units = data;
          // appendUnitToSelect(data, unitSelect)
        });

      console.log(`data: ${data}`);
      ('<% if (data != -1) { %>');
      rId = '<%= data %>';
      recipeHeading.innerText = 'Edit recipe';
      recipeNameInput.value = '<%= data.name %>';
      recipeDescriptionInput.value = '<%= data.description %>';
      ('<%}%>');

      saveRecipeForm.addEventListener('submit', () => {
        const recipeName = recipeNameInput.value;
        const recipeDescription = recipeDescriptionInput.value;

        if (!isAlphaNumeric(recipeName)) {
          return alert(`Name '${recipeName}' is not alphanumeric`);
        }
        if (!isAlphaNumeric(recipeDescription)) {
          return alert(
            `Description '${recipeDescription}' is not alphanumeric`
          );
        }

        // // create the new entry
        // const newRecipe = {
        //   name: recipeNameInput.value,
        //   description: recipeDescriptionInput.value
        // }
        // console.log(newRecipe)

        // console.log(`Data = ${data}`)

        // if (rId == null) {

        //   // async add, then re-render
        //   addRecipe(newRecipe).then(response => {
        //     if (!response.ok) {
        //       const errorMessage = `Error ${response.status} - ${response.statusText}`
        //       console.log(errorMessage)
        //     } else {
        //       window.location.pathname = ('/..') // navigates user back to main page
        //     }
        //   })

        // } else {
        //   console.log(`About to update recipe with id ${rId}`)
        //   updateRecipe(newRecipe, rId).then(response => {
        //     if (!response.ok) {
        //       const errorMessage = `Error ${response.status} - ${response.statusText}`
        //       console.log(errorMessage)
        //       return alert(errorMessage)
        //     } else {
        //       window.location.pathname = (`/../recipes/${rId}`)
        //     }
        //   })
        // }
      });

      addIngredientInputBtn.addEventListener('click', () => {
        const nextIngredientInputId = recipeIngredientInputArray.length;
        createAndAppendIngredientInput(nextIngredientInputId);
      });

      addStepInputBtn.addEventListener('click', () => {
        saveCurrentStepInputs();
        recipeStepArray.push(''); // push an empty string as the last element of recipeStepArray
        rerenderRecipeSteps();
      });

      beforeSendBtn.addEventListener('click', () => {
        console.log('beforeSendButton was clicked');

        var newRecipe = {
          recipe: null,
          ingredients: null,
          steps: null,
        };

        // recipe

        // ingredients

        // steps
        saveCurrentStepInputs();
        // steps
        var newRecipeStepArray = [];
        for (let i = 0; i < recipeStepArray.length; i++) {
          const stepDescription = recipeStepArray[i];

          const newRecipeStep = {
            description: stepDescription,
          };

          newRecipeStepArray.push(newRecipeStep);
        }

        newRecipe.steps = newRecipeStepArray;

        console.log(`About to send:`);
        console.log(newRecipe);
      });

      consoleLogInputBtn.addEventListener('click', () => {
        console.log(`Clicked!`);

        console.log(`recipeIngredientInputArray ${recipeIngredientInputArray}`);

        const newRecipe = {
          recipe: {
            name: recipeNameInput.value,
            description: recipeDescriptionInput.value,
            portions: 2,
          },
          ingredients: null,
          steps: null,
        };

        var newRecipeIngredientArray = [];
        var newRecipeStepArray = [];

        // ingredients
        for (let i = 0; i < recipeIngredientInputArray.length; i++) {
          const { ingredientSelect, amountInput, unitSelect } =
            recipeIngredientInputArray[i];
          var ingredientName =
            ingredientSelect.options[ingredientSelect.selectedIndex].text;
          console.log(`Ingredient: ${ingredientName}`);
          var amount = amountInput.value;
          console.log(`Amount: ${amount}`);
          var unitName = unitSelect.options[unitSelect.selectedIndex].text;
          console.log(`Unit: ${unitName}`);

          // must find the id of the selected ingredient for api call
          var ingredientId;
          for (let j = 0; j < ingredients.length; j++) {
            const ingredient = ingredients[j];
            if (ingredient.name == ingredientName) {
              ingredientId = ingredient.id;
            }
          }

          const newRecipeIngredient = {
            ingredientId: ingredientId,
            quantity: amount,
            unit: unitName,
          };
          newRecipeIngredientArray.push(newRecipeIngredient);
        }

        console.log(newRecipeIngredientArray);

        // steps
        var newRecipeStepArray = [];
        for (let i = 0; i < recipeStepInputArray.length; i++) {
          const { stepNumber, description } = recipeStepInputArray[i];

          var stepDescription = description.value;

          const newRecipeStep = {
            description: stepDescription,
          };

          // console.log(`Step number: ${stepNumber}`)
          // console.log(`Description: ${stepDescription}`)
          newRecipeStepArray.push(newRecipeStep);
        }

        newRecipe.ingredients = newRecipeIngredientArray;
        newRecipe.steps = newRecipeStepArray;

        console.log(newRecipe);
      });

      dummyCreateButton.addEventListener('click', () => {
        const newRecipe = {
          recipe: {
            name: 'Goda pannkakor',
            description: 'Supergoda pannkakor',
            portions: 4,
          },
          ingredients: [
            {
              ingredientId: 2,
              quantity: 2,
              unit: 'piece',
            },
            {
              ingredientId: 4,
              quantity: 2,
              unit: 'spicespoon',
            },
            {
              ingredientId: 3,
              quantity: 2,
              unit: 'deciliter',
            },
            {
              ingredientId: 5,
              quantity: 4,
              unit: 'deciliter',
            },
          ],
          steps: [
            {
              description: 'A first step',
            },
            {
              description: 'A second step',
            },
            {
              description: 'A third step',
            },
          ],
        };
        console.log(`About to create ${newRecipe}`);
        createFullRecipe(newRecipe).then((response) => {
          if (!response.ok) {
            const errorMessage = `Error ${response.status} - ${response.statusText}`;
            console.log(errorMessage);
            return alert(errorMessage);
          } else {
            window.location.pathname = `/..`;
          }
        });
      });

      // if new entry, then rId is set to -1
      if (data != -1) {
        console.log(`About to get full recipe with id ${data}`);
        var id = data.id;
        console.log(`Id: ${id}`);
        // getFullRecipe(id)//
        getFullRecipe(1) // hard coded value for testing
          .then((response) => response.json())
          .then((data) => {
            // console.log(data.ingredients);
            // loadIngredientInputs(data.ingredients);

            recipeIngredientArray = data.ingredients;
            console.log(`Arrya:`);
            console.log(recipeIngredientArray);
            rerenderRecipeIngredients();

            recipeStepArray = getStepDescriptionArray(data.steps);
            // console.log(recipeStepArray);
            rerenderRecipeSteps();
          });
      }
    </script>
  </body>
</html>
